version: "3.9"

# Oracle shape auto-detection and configuration templates:
# - Automatically detects Oracle Cloud shapes (E2.1.Micro, E2.2.Micro, A1.Flex-1, A1.Flex-4)
# - Loads shape-specific configuration templates from config-templates/ directory
# - Environment variables override template values (ENV > TEMPLATE > DEFAULT)
# - For non-Oracle environments, uses conservative E2.1.Micro-like defaults

services:
  loadshaper:
    build: .
    container_name: loadshaper
    restart: ${RESTART_POLICY:-always}
    ports:
      - "${HEALTH_PORT:-8080}:${HEALTH_PORT:-8080}"   # health check endpoints
    volumes:
      # Mount config templates for Oracle shape auto-detection
      - ./config-templates:/app/config-templates:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${HEALTH_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    environment:
      # === P95 CPU Control (Oracle-compliant, auto-configured per shape) ===
      CPU_P95_TARGET_MIN: "${CPU_P95_TARGET_MIN}"     # P95 target minimum %
      CPU_P95_TARGET_MAX: "${CPU_P95_TARGET_MAX}"     # P95 target maximum %
      CPU_P95_SETPOINT: "${CPU_P95_SETPOINT}"         # P95 target setpoint %
      CPU_P95_EXCEEDANCE_TARGET: "${CPU_P95_EXCEEDANCE_TARGET}" # exceedance budget %
      CPU_P95_BASELINE_INTENSITY: "${CPU_P95_BASELINE_INTENSITY}" # baseline intensity %
      CPU_P95_HIGH_INTENSITY: "${CPU_P95_HIGH_INTENSITY}"     # high intensity %

      # === Memory/Network Targets (auto-configured per shape) ===
      MEM_TARGET_PCT: "${MEM_TARGET_PCT}"             # target RAM used (auto-configured per shape, disabled for E2)
      NET_TARGET_PCT: "${NET_TARGET_PCT}"             # target NIC utilization % (auto-configured per shape bandwidth)

      # === Safety stop thresholds (auto-configured per Oracle shape) ===
      CPU_STOP_PCT: "${CPU_STOP_PCT}"                 # auto-configured per tenancy type (E2 vs A1)
      MEM_STOP_PCT: "${MEM_STOP_PCT}"                 # auto-configured per shape memory rules
      NET_STOP_PCT: "${NET_STOP_PCT}"                 # auto-configured per shape bandwidth capacity

      # === Control behavior ===
      CONTROL_PERIOD_SEC: "${CONTROL_PERIOD_SEC:-5}"
      AVG_WINDOW_SEC: "${AVG_WINDOW_SEC:-300}"
      HYSTERESIS_PCT: "${HYSTERESIS_PCT:-5}"
      JITTER_PCT: "${JITTER_PCT:-15}"
      JITTER_PERIOD_SEC: "${JITTER_PERIOD_SEC:-5}"

      # === Memory safety ===
      MEM_MIN_FREE_MB: "${MEM_MIN_FREE_MB:-512}"
      MEM_STEP_MB: "${MEM_STEP_MB:-64}"

      # === Network shaping (no host net; unprivileged port) ===
      NET_MODE: "${NET_MODE:-client}"                 # off|client
      NET_PROTOCOL: "${NET_PROTOCOL:-udp}"            # udp (lower CPU) | tcp
      NET_PEERS: "${NET_PEERS:-10.0.0.2,10.0.0.3}"    # other VMs
      NET_PORT: "${NET_PORT:-15201}"                  # network generation port
      NET_BURST_SEC: "${NET_BURST_SEC:-10}"           # client burst duration
      NET_IDLE_SEC: "${NET_IDLE_SEC:-10}"             # idle between bursts

      # Which host NIC to measure (for utilization %) and its speed
      NET_SENSE_MODE: "${NET_SENSE_MODE:-container}"  # container|host (use container for rootless)
      NET_IFACE_INNER: "${NET_IFACE_INNER:-eth0}"     # container NIC name to read in /proc/net/dev
      NET_LINK_MBIT: "${NET_LINK_MBIT:-1000}"         # fallback link speed if /sys speed is unknown

      # Limits for the controller -> client sending rate (Mbps)
      NET_MIN_RATE_MBIT: "${NET_MIN_RATE_MBIT:-0}"          # Allow true idle (0 Mbps minimum)
      NET_MAX_RATE_MBIT: "${NET_MAX_RATE_MBIT:-800}"  # cap below link speed for safety

      # === Health check server ===
      HEALTH_ENABLED: "${HEALTH_ENABLED:-true}"       # enable HTTP health endpoints
      HEALTH_PORT: "${HEALTH_PORT:-8080}"             # port for /health and /metrics endpoints
